name: "Tests"
defaults:
  run:
    shell: bash
    working-directory: ./examples/simple
env:
  AWS_PROFILE: default
  AWS_REGION: us-east-1
  ENV: testnut
  SSH_PUBLIC_KEY: "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC/aYdKsVZpBnLkvNA/AKLFHG+NBxUbPgCCeipedMQZqzv8hyQZAwyeVVD8w8yA/fFWmVBIu2Ww9UTtlknF7DmpFoXJGd+cOO5y7YOojS5OHVS4OJ35FR+oihW63o8Sv6N12HKKpDSLQQcUbxmHepkN6r/n2IIhdmQgTXKe06OxXYozsl3FsONtrTdI+5v114UzQx4zpG1bmDC9DRJO1s5FY062YjQXSMUDzdd9gP/o7yivunAGZjfEFcItVUjAWux53LIGjaNBBXUA5YtL08p40CxOX4k+Tz686SmbROP8ORCA5HOEYRfk5uuELhhS1+mipAJqgb40PMZlrcrpHUTqnanxxiGcXHVofzw7StaCI9ITdrMArmGIYD+gphSbW9HptF+6oBw8zB9n++T/vI+CvWf5ee+7MqbQPKlZgutS9QMhUnsCtNeuhLS9sNQO59KL4sEzpks3Cr+OlBj+Ib6pH3/S6HBp7mVoXnrQrW26f+O70QK3Y38XEZNQNJNjqG8= testnut-nutcorp"

on:
  pull_request:

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-18.04, ubuntu-20.04, macos-10.15, macos-11.0]
    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          submodules: recursive

#      - name: Install Docker # Taken from https://github.com/actions/virtual-environments/issues/1143#issuecomment-652264388
#        if: matrix.os == 'macos-10.15'
#        run: |
#          sw_vers -productVersion
#          mkdir -p ~/.docker/machine/cache
#          curl -Lo ~/.docker/machine/cache/boot2docker.iso https://github.com/boot2docker/boot2docker/releases/download/v19.03.12/boot2docker.iso
#          brew install docker docker-machine
#          # brew install --cask virtualbox
#
#          # Workaround per https://stackoverflow.com/questions/21069908/vboxmanage-error-failed-to-create-the-host-only-adapter
#          #sudo "/Library/Application Support/VirtualBox/LaunchDaemons/VirtualBoxStartup.sh" restart
#
#          docker-machine create --driver virtualbox default
#          docker-machine env default

      - name: Install Docker # Taken from https://github.com/actions/virtual-environments/issues/1143#issuecomment-652264388
        if: matrix.os == 'macos-11.0' || matrix.os == 'macos-10.15'
        run: |
          sw_vers -productVersion

          brew install --cask docker
          # allow the app to run without confirmation
          xattr -d -r com.apple.quarantine /Applications/Docker.app

          # Preemptively do docker.app's setup to avoid any gui prompts
          sudo /bin/cp /Applications/Docker.app/Contents/Library/LaunchServices/com.docker.vmnetd /Library/PrivilegedHelperTools
          sudo ls -la /Applications/Docker.app/Contents/Resources/
          #sudo find /Applications -name com.docker.vmnetd.plist
          #sudo find /opt -name com.docker.vmnetd.plist
          # sudo /bin/cp /Applications/Docker.app/Contents/Resources/com.docker.vmnetd.plist /Library/LaunchDaemons/
          sudo /bin/chmod 544 /Library/PrivilegedHelperTools/com.docker.vmnetd

          # sudo /bin/chmod 644 /Library/LaunchDaemons/com.docker.vmnetd.plist
          #sudo /bin/launchctl load /Library/LaunchDaemons/com.docker.vmnetd.plist

      - name: Setup BATS
        uses: mig4/setup-bats@v1
        with:
          bats-version: 1.3.0

      - name: Run Unit Tests
        working-directory: ./
        run: |


          echo $PATH
          



          # refs:
          # https://stackoverflow.com/a/35979292/425458

          if [[ $(uname) == 'Darwin' ]]; then
            ls -la /Applications/Docker.app/Contents/Resources/bin/
            #echo "-- Starting Docker.app, if necessary..."

            #open -g -a Docker.app || exit

            ## Wait for the server to start up, if applicable.
            #i=0
            #while ! docker system info &>/dev/null; do
            #  (( i++ == 0 )) && printf %s '-- Waiting for Docker to finish starting up...' || printf '.'
            #  sleep 1
            #done
            #(( i )) && printf '\n'

            #echo "-- Docker is ready."
          fi

          bats --report-formatter junit -o ./ tests/*.bats

      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v2
        if: always()
        with:
          report_paths: '**/report.xml'

  install-ssm-plugin:
    name: Install SSM Plugin
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-18.04, ubuntu-20.04, macos-10.15, macos-11.0]
    steps:

      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Install SSM Plugin
        run: make ssm-plugin

      - name: Show OS Debug Info
        run: make os.debug

      - name: Show ICMK Debug Info
        run: make icmk.debug

      - name: Show AWS Debug Info
        run: make aws.debug

  clean-install:
    name: Clean Install
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash

    strategy:
      matrix:
        os: [ubuntu-18.04, ubuntu-20.04, macos-10.15, macos-11.0]
    steps:

      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Create Test directory
        run: mkdir -p ./test/clean-install

      - name: Clean Install
        working-directory: ./test/clean-install
        # Special directory that we use to test a clean install
        run: make init -f $(cat $GITHUB_WORKSPACE/init.mk > $(pwd)/init.mk && echo "$(pwd)/init.mk")

      - name: Init Examples
        working-directory: ./test/clean-install
        run: echo "y" | make examples.simple -f .infra/icmk/init.mk

      - name: Show OS Debug Info
        working-directory: ./test/clean-install
        run: make os.debug

      - name: Show ICMK Debug Info
        working-directory: ./test/clean-install
        run: make icmk.debug

      - name: Show AWS Debug Info
        working-directory: ./test/clean-install
        run: make aws.debug


  update-to-master:
    runs-on: ${{ matrix.os }}
    name: Update to master
    strategy:
      matrix:
        os: [ubuntu-18.04, ubuntu-20.04, macos-10.15, macos-11.0]
    env:
      ICMK_VERSION: origin/master
    steps:

      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Update ICMK
        run: make icmk.update

      - name: Show OS Debug Info
        run: make os.debug

      - name: Show ICMK Debug Info
        run: make icmk.debug

      - name: Show AWS Debug Info
        run: make aws.debug


  update-to-2_0_0:
    name: Update to 2.0.0
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-18.04, ubuntu-20.04, macos-10.15, macos-11.0]
    env:
      ICMK_VERSION: tags/2.0.0
    steps:

      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          submodules: true

      # TODO checkout older version, and test upgrade from one to another
      - name: Update ICMK
        run: make icmk.update

      - name: Show OS Debug Info
        run: make os.debug

      - name: Show ICMK Debug Info
        run: make icmk.debug

      - name: Show AWS Debug Info
        run: make aws.debug
